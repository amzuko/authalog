Index clauses
Cache invalidation
    Invalidate on external relation change
    Invalidate on asserting new clauses / facts
    Invalidate on retracting things
Static errors
    Check on db.Asset()
    Track parse position
    Feed back along with errors
    Negation inside recursion
    Calling relations with wrong # of arguments
    Calling non existent relations
    Variable bound in head but only bound in negated body literal
Docstring comments on rules
Pass errors up through querying
Make sure columns and so forth exist in sql schema when creatin sql external relations

Concurrent use of database
    Snapshots for consistent querying?

Parse a nil thing and consistently use it for nil pointers

A in [] syntax
    static checks so that in() never called directly or overridden
    update termstring to handle static sets
    Is there 

Allow for don't care variables in clause heads?
    What if we only match clauses to queries when there are ground terms in the DC slots?

Profiling of execution -- what clauses eat the most time?

Testing -- for the projectID, want to test that each resource type can be bound at least once

In db.Literal, keep track of types of args. Then, walk all clauses and look for consistency.

A "table" helper function


